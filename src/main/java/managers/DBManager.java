package managers;

import db.Product;
import db.ProductDAO;

import java.io.InputStream;
import java.io.PrintStream;
import java.util.*;
import java.util.function.Consumer;

public class DBManager {
    private ProductDAO dao;
    private PrintStream out;
    private Scanner in;
    private final Map<String, Consumer<Scanner>> functions = Map.of(
            "/add", DBManager.this::add,
            "/delete", DBManager.this::delete,
            "/show_all", DBManager.this::showAll,
            "/price", DBManager.this::price,
            "/change_price", DBManager.this::changePrice,
            "/filter_by_price", DBManager.this::filterByPrice
    );

    public DBManager() {
        out = System.out;
        in = new Scanner(System.in);
    }

    public DBManager(InputStream in, PrintStream out) {
        this.out = out;
        this.in = new Scanner(in);
    }

    public void start() {
        out.println("Please type your database login: ");
        final String username = in.next();
        out.println("Please type your database password: ");
        final String password = in.next();
        try {
            dao = new ProductDAO(username, password);
            out.println("Successfully logged in!");
            out.println("Please type number of autogenerated rows: ");
            final int size = in.nextInt();
            out.println("Generating...");
            dao.clear();
            for (int i = 0; i < size; i++) {
                dao.add(new Product(i, "товар" + i, i * 10));
            }
            out.println("Table successfully generated, now you can type commands.");
        } catch (Exception e) {
            out.println(e.getMessage());
            start();
        }
        while (in.hasNextLine()) {
            try {
                final String command = in.next();
                if (command.equals("/exit")) {
                    break;
                }
                execute(command + in.nextLine());
            } catch (RuntimeException e) {
                out.println(e.getMessage());
            }
        }
    }

    public void execute(String commandLine) {
        final Scanner line = new Scanner(commandLine);

        if (line.hasNext()) {
            functions.getOrDefault(line.next(), (c) -> out.println("No such command")).accept(line);
        }
    }

    private void add(Scanner args) {
        try {
            final String title = args.next();
            final int cost = args.nextInt();
            dao.add(new Product(0, title, cost));
        } catch (NoSuchElementException e) {
            throw new RuntimeException("Wrong format of a command", e);
        }
    }

    private void delete(Scanner args) {
        try {
            final String title = args.next();
            dao.deleteByName(title);
        } catch (NoSuchElementException e) {
            throw new RuntimeException("Wrong format of a command", e);
        }
    }

    private void showAll(Scanner args) {
        final List<Product> list = dao.list();
        for (Product it : list) {
            out.println(it);
        }
    }

    private void price(Scanner args) {
        try {
            final String title = args.next();
            out.println(dao.getByTitle(title).getCost());
        } catch (NoSuchElementException e) {
            throw new RuntimeException("Wrong format of a command", e);
        }
    }

    private void changePrice(Scanner args) {
        try {
            final String title = args.next();
            final int newCost = args.nextInt();
            dao.changePrice(title, newCost);
        } catch (NoSuchElementException e) {
            throw new RuntimeException("Wrong format of a command", e);
        }
    }

    private void filterByPrice(Scanner args) {
        try {
            final int from = args.nextInt();
            final int to = args.nextInt();
            final ArrayList<Product> list = dao.filterByPrice(from, to);
            for (final Product it : list) {
                out.println(it);
            }
        } catch (NoSuchElementException e) {
            throw new RuntimeException("Wrong format of a command");
        }
    }
}
